Design of project:

This project can be split into several main groups, each of them mostly independent from one another.
Those groups are, from back to front end:

1. Download, cache, and concatenate the videos				NEXT
2. Interface with the websites						DONE
3. Map the words to the proper signs from the proper dictionaries	TODO
4. Use an NLP engine to determine what words need to be downloaded	TODO
5. The graphical user interface that everyone sees			TODO

Notes on specific groups:

1)
	* This one will be quite difficult, and I think I may have to ditch the cross-platform capability for this
	* Of course, that platform will be Windows (although I will write custom code so MY copy works on Linux)
	* The download system will be quite complicated, as I will probably want something that can display progress
	* Set up something like the Job system I once wrote for the podcatcher
	* Actually, the downloads are so short that it would be useless to try to display progress
	* Maybe just a text field that displays what has been downloaded so far
	* For the caching - cache based on what the word is, not the URL - to speed up downloading for SigningSavvy videos
	* The concatenation will be the most difficult part
	* Download an up-to-date copy from zeranoe and unzip it with SharpCompress
	* Viewing video will probably be done by using Process.Start(); there is no other practical way to do it.
2)
	* This is the part that I am currently working on
	* Make this very modular - in case someone finds a good dictionary and wants to incorporate it
	* Create a class structure where everything inherits BaseDictionary -- ongoing
	* Try to use CsQuery - it makes things MUCH simpler
	* Where CsQuery is impractical (i.e. ASL Pro), try to use regular expressions and
	  add comments explaining what a sample input is and what the output would be.
3)
	* This is going to be quite an annoying problem
	* You can start off with trivial mapping - e.g. mapping "ANGRY (as in mad)" to "ANGRY"
	* However, some of it will get more difficult - e.g. mapping "JOYFUL" => "HAPPY"
	* Some sort of thesaurus could be used for this
	* Several candidates found -- Moby Thesaurus, OpenOffice MyThes, or WordNet (maybe)
	* These should probably be bundled with the application, so I can process them
	* I can include the LZMA code, and bundle the thesauruses as byte arrays
	* The application will unzip the thesauruses on first run, along with all the other stuff, like
	  unzipping ffmpeg (which I can probably also LZMA) and creating the dictionaries
	* Actually, I could use SharpCompress to do full-on 7z
	* The other option would be to just directly get the files from GitHub
	* This is probably the simplest - no decompressing, just straightforward WebClient.DownloadFile()
	
4)
	* Honestly, this may be easier than #3
	* Since ASL => English is much easier than, say, Latin => English, this will be quite easy
	* I will probably need a tokenizer and part-of-speech classifier
	* Apart from that, I will not need that much
	* I may, however, need to use the NLP engine for #3 as well

5)
	* This is going to be REALLY annoying
	* I will probably have to do this entire step in Windows
	* It is probably not reasonable to require people to install Gtk# bindings, so that's out of the question
	* However, if I could bundle it with the application, I could try that
	* This is still ignoring, however, the fact that I have no idea how to code in GTK#



	Some psuedocode logic:

	string sentence = "The BananaPad includes a news bar at the bottom of the screen displaying your latest alerts, such as emails, texts, and social media."
	List<string> words = NaturalLanguage.TrimUnneeded(sentence)
	//something like {"BananaPad", "include", "news", "bar", "bottom", "screen", "display", "your", "latest", "alerts"}
	foreach (string word in words) {
		if (!(ASLPro.Contains(word) || SigningSavvy.Contains(word))) {
			List<string> suggestions = Thesaurus.GetSuggestions(word);
			string better = UserChoose(suggestions);
			words.Replace(word, better);
		}
	}
	var downloader = new VideoDownloader();
	foreach (string word in words) {
		if (SigningSavvy.Contains(word)) {
			downloader.AddJob(word, SigningSavvy.GetVideoURL(word));
		} elseif (ASLPro.Contains(word)) {
			downloader.AddJob(word, ASLPro.GetVideoURL(word));
		} else {
			throw new Exception("This really should never happen");
		}
	}
	downloader.Start();
	List<string> finishedURLs = downloader.GetURLs();
	File.WriteAllLines(finishedURLs, "list");
	Process.Start("ffmpeg", "--concatenate list -o finishedVideo.mp4");
	Process.Start("finishedVideo.mp4")
